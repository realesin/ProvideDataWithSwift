import XCTest
@testable import BinaryStream

final class BinaryStreamTests: XCTestCase {
    func testExample() throws {
        let stream: BinaryStream = BinaryStream()
        stream.swapEndian() // works with and without. its the the same values
        stream.writeUInt8(value: 0x01)
        stream.writeUInt8(value: 0x02)
        stream.writeUInt8(value: 0x03)
        stream.writeUInt8(value: 0x04)
        stream.writeUInt8(value: 0x05)
        stream.writeBool(value: true)
        stream.writeBool(value: false)
        stream.writeUInt16(value: 19132)
        stream.writeUInt16(value: 0xffff)
        stream.writeInt16(value: 0x7fff)
        stream.writeUInt24(value: BinaryStream.UInt24Max)
        stream.writeInt24(value: BinaryStream.Int24Max)
        stream.writeUInt32(value: UInt32.max)
        stream.writeInt32(value: Int32.max)
        stream.writeUInt64(value: UInt64.max)
        stream.writeInt64(value: Int64.max)
        stream.writeVarInt(value: 10990)
        stream.writeVarInt64(value: 10000000000)
        stream.writeZigZag32(value: 10990)
        stream.writeZigZag64(value: 10000000000)
        stream.writeFloat(value: 1.4)
        stream.writeDouble(value: 1.43837483899)
        stream.writeInt64(value: Int64.max)
        print("Read: \(try! stream.readUInt8())")
        print("Read: \(try! stream.readUInt8())")
        print("Read: \(try! stream.readUInt8())")
        print("Read: \(try! stream.readUInt8())")
        print("Read: \(try! stream.readUInt8())")
        print("Bool: \(try! stream.readBool())")
        print("Bool: \(try! stream.readBool())")
        print("Read: \(try! stream.readUInt16())")
        print("Read: \(try! stream.readInt16())") // to check if truncate works
        print("Read: \(try! stream.readInt16())")
        print("Read: \(try! stream.readUInt24())")
        print("Read: \(try! stream.readInt24())")
        print("Read: \(try! stream.readUInt32())")
        print("Read: \(try! stream.readInt32())")
        print("Read: \(try! stream.readUInt64())")
        print("Read: \(try! stream.readInt64())")
        print("VarInt: \(try! stream.readVarInt())")
        print("VarInt: \(try! stream.readVarInt64())")
        print("ZigZag: \(try! stream.readZigZag32())")
        print("ZigZag: \(try! stream.readZigZag64())")
        print("Float: \(try! stream.readFloat())")
        print("Double: \(try! stream.readDouble())")
        print("Eos: \(stream.eos())")
        print("Remaining: \(try! stream.readRemaining())")
        print("Eos: \(stream.eos())")
        print("-----------------------------")
        print("PAD WITH ZERO SEQ")
        print("-----------------------------")
        stream.padWithZeroToSize(size: 100)
        print("Eos: \(stream.eos())")
        print("Size: \(try! stream.readRemaining().count)")
        print("Eos: \(stream.eos())")
        print("-----------------------------")
    }
}
